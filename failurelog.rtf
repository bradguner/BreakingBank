{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9440\viewh7860\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 Failure Log\
========\
Failure Observed\
Which Test Failed\
What it was testing\
What was wrong with output\
Fix failure\
How we fixed it\
What code error was\
\
===========\
1st\
test_create_bad_accnum\
doesn\'92t accept any acc number as valid\
Fixed ==???\
==========\
2nd\
all test case the input amount gave a bad input but did not follow up with a good input\
==========\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\fs22 \cf0 \CocoaLigature0 running test_deposit_goodretail.txt\
Traceback (most recent call last):\
  File "../breakingbank.py", line 472, in <module>\
    openBankingSystem()\
  File "../breakingbank.py", line 455, in openBankingSystem\
    loggedIn = retailDay.runRetailDay()\
  File "../breakingbank.py", line 142, in runRetailDay\
    newTrans = self.deposit()\
  File "../breakingbank.py", line 60, in deposit\
    print amount + "\\n"
\f0\fs24 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 =========\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\fs22 \cf0 \CocoaLigature0 running test_login_transbefore.txt\
cp: ./tempsummfile.txt: No such file or directory\
rm: ./tempsummfile.txt: No such file or directory
\f0\fs24 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 ===========\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\fs22 \cf0 \CocoaLigature0 running test_transfer_agent_bad_amount.txt\
Traceback (most recent call last):\
  File "../breakingbank.py", line 472, in <module>\
    openBankingSystem()\
  File "../breakingbank.py", line 459, in openBankingSystem\
    loggedIn = agentDay.runAgentDay()\
  File "../breakingbank.py", line 340, in runAgentDay\
    newTrans = self.transfer()\
  File "../breakingbank.py", line 236, in transfer\
    print amount + "\\n"\
\
went through and checked this error for all functions
\f0\fs24 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 ============\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\fs22 \cf0 \CocoaLigature0 running test_transfer_bad_accnums.txt\
Traceback (most recent call last):\
  File "../breakingbank.py", line 472, in <module>\
    openBankingSystem()\
  File "../breakingbank.py", line 459, in openBankingSystem\
    loggedIn = agentDay.runAgentDay()\
  File "../breakingbank.py", line 340, in runAgentDay\
    newTrans = self.transfer()\
  File "../breakingbank.py", line 235, in transfer\
    amount = int(raw_input('Transfer Amount (Cents) : '))\
ValueError: invalid literal for int() with base 10: 'logout'\
BAD TEST CASE\
also for running test_withdraw_retaillimit.txt\
============\
running test_withdraw_goodretail.txt\
  File "../breakingbank.py", line 264\
    if (!acctNumExist(accNum)):\
        ^\
SyntaxError: invalid syntax\
=============\
Type "login" to login: login\
\
agent or retail: agent\
\
Perform a transaction: create\
\
Enter your desired account number: 111111\
\
Please enter a valid account number.\
Enter your desired account number: 1111111\
\
Enter your desired account name: 234567\
\
Perform a transaction: Test Name\
\
Please enter a valid transaction type.\
Perform a transaction: logout\
\
Type "login" to login: stop\
========\
agent or retail: agent\
\
Perform a transaction: create\
\
Enter your desired account number: 123456\
\
Enter your desired account name: Test Name\
\
Perform a transaction: withdraw\
\
Account Number: 123456\
\
Please enter a valid account number.\
Account Number: 111111\
\
Please enter a valid account number.\
Account Number: 10000\
\
Please enter a valid account number.\
Account Number: logout\
\
Please enter a valid account number.\
Account Number: stop\
\
Please enter a valid account number.\
Account Number: \
\
Please enter a valid account number.\
Account Number: \
test create transpostcreation\
===========\
Type "login" to login: login\
\
agent or retail: agent\
\
Perform a transaction: delete\
\
Enter the account number: 123456\
\
Enter the account name: 111111\
\
Perform a transaction: Test Name\
\
Please enter a valid transaction type.\
Perform a transaction: logout\
\
Type "login" to login: stop\
delete bad accnum\
========\
running test_create_transpostcreation.txt\
Traceback (most recent call last):\
  File "../breakingbank.py", line 474, in <module>\
    openBankingSystem()\
  File "../breakingbank.py", line 461, in openBankingSystem\
    loggedIn = agentDay.runAgentDay()\
  File "../breakingbank.py", line 336, in runAgentDay\
    newTrans = self.withdraw()\
  File "../breakingbank.py", line 165, in withdraw\
    accNum = raw_input('Account Number: ')\
EOFError: EOF when reading a line\
comparing int to string in acc num check\
=============\
running test_delete_good.txt\
Traceback (most recent call last):\
  File "../breakingbank.py", line 475, in <module>\
    openBankingSystem()\
  File "../breakingbank.py", line 462, in openBankingSystem\
    loggedIn = agentDay.runAgentDay()\
  File "../breakingbank.py", line 348, in runAgentDay\
    newTrans = self.delete()\
  File "../breakingbank.py", line 289, in delete\
    accNum = int(input('Enter the account number: '))\
  File "<string>", line 1\
    Test Name\
python code if had opposite result\
}